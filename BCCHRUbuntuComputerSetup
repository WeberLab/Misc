#!/usr/bin/env bash
sudo apt-get install aptitude
sudo aptitude install htop
sudo aptitude install cifs-utils
sudo nano /etc/hostname #change computer name
sudo nano ~/.smbcredentials
sudo groupadd -g 2468 WeberLab
sudo usermod -aG WeberLab aweber
sudo usermod -aG WeberLab olivia.campbell
sudo usermod -aG WeberLab johann.drayne
sudo usermod -aG WeberLab anna.zhu

sudo aptitude install xclip
sudo aptitude install imagemagick

#copy mnt.sh script over

#Generate Github ssh-key
ssh-keygen -t ed25519 -C "weberam2@gmail.com" #change e-mail
xclip -selection clipboard < ~/.ssh/id_ed25519.pub

#Bash-It
git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
~/.bash_it/install.sh #answer y

sudo aptitude install tmux 
git clone https://github.com/samoshkin/tmux-config.git
./tmux-config/install.sh #copy a config file from another computer
#add to .bashrc:
"#start tmux automatically
if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
    #tmux attach -t default || tmux new -s default
    tmux a
fi"

sudo apt-get update
sudo apt-get --assume-yes upgrade

sudo apt-get --assume-yes install build-essential gcc g++ make binutils

#NVIDIA/CUDA
#sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
#wget -O cuda.deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.0.176-1_amd64.deb
#sudo dpkg -i cuda.deb
#sudo apt-get update
#sudo apt-get install cuda-toolkit-9.0 cuda-command-line-tools-9-0
# 9.1
#wget -O cuda.deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-9-1_9.1.85-1_amd64.deb
#sudo aptitude install cuda-toolkit-9-1 cuda-command-line-tools-9-1

wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux
wget https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux
wget https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux
wget -LO https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/3/cuda_9.1.85.3_linux

chmod +x cuda_9.1*

sudo sh cuda_9.1.85_387.26_linux --override --toolkit --silent

sudo sh cuda_9.1.85.1_linux --accept-eula --silent
sudo sh cuda_9.1.85.2_linux --accept-eula --silent
sudo sh cuda_9.1.85.3_linux --accept-eula --silent


#edit bash:
"export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/cuda/include:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda/bin:$PATH
export CUDA_HOME=/usr/local/cuda:$CUDA_HOME"

sudo ln -sf ${FSLDIR}/bin/eddy_cuda9.1 ${FSLDIR}/bin/eddy_cuda

#Anaconda3
wget -P /tmp https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh
bash /tmp/Anaconda3-2020.02-Linux-x86_64.sh #add export PATH=$PATH:$HOME/anaconda3/bin to .bashrc
conda upgrade -y --all

#FSL
wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py
sudo aptitude install python
python2 fslinstaller.py

#Docker
sudo aptitude install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"
sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo usermod -aG docker $USER #also: johann, olivia, anna, etc.
newgrp docker

#fmriprep
python -m pip install --user --upgrade fmriprep-docker

#freesurfer
#grab the license from one of the other computers
wget https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos8_x86_64-7.1.1.tar.gz
sudo tar -C /usr/local -zxvpf freesurfer-linux-centos8_x86_64-7.1.1.tar.gz
#add to .bashrc:
"export FREESURFER_HOME=/usr/local/freesurfer
export SUBJECTS_DIR=$FREESURFER_HOME/subjects
source $FREESURFER_HOME/SetUpFreeSurfer.sh"

#ANTs
sudo aptitude install cmake
workingDir=${PWD}
git clone https://github.com/ANTsX/ANTs.git
mkdir build install
cd build
cmake \
    -DZLIB_LIBRARY=/usr/lib/x86_64-linux-gnu/libz.so \
    -DCMAKE_INSTALL_PREFIX=${workingDir}/install \
    ../ANTs 2>&1 | tee cmake.log
make -j 4 2>&1 | tee build.log
cd ANTS-build
make install 2>&1 | tee install.log
#copy install/bin and install/lib to /usr/local/ANTs/
#add to .bashrc:
"export ANTSPATH=/usr/local/ANTs/bin
export PATH=${ANTSPATH}:$PATH"

#AFNI
sudo apt-get install -y tcsh xfonts-base libssl-dev       \
                        python-is-python3                 \
                        python3-matplotlib                \
                        gsl-bin netpbm gnome-tweak-tool   \
                        libjpeg62 xvfb xterm vim curl     \
                        gedit evince eog                  \
                        libglu1-mesa-dev libglw1-mesa     \
                        libxm4 build-essential            \
                        libcurl4-openssl-dev libxml2-dev  \
                        libgfortran-8-dev libgomp1        \
                        gnome-terminal nautilus           \
                        gnome-icon-theme-symbolic         \
                        firefox xfonts-100dpi             \
                        r-base-dev
sudo ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.23 /usr/lib/x86_64-linux-gnu/libgsl.so.19
cd
curl -O https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries
tcsh @update.afni.binaries -package linux_ubuntu_16_64 -do_extras
sudo mv abin /usr/local/
export R_LIBS=$HOME/R
mkdir  $R_LIBS
echo  'setenv R_LIBS ~/R'     >> ~/.cshrc
echo  'export R_LIBS=$HOME/R' >> ~/.bashrc
/usr/local/abin/rPkgsInstall -pkgs ALL #this will take a long time. Seems to install to user specific location...

#add to .bashrc:
"export PATH=$PATH:/usr/local/abin
if [ -f /usr/local/abin/.afni/help/all_progs.COMP.bash ]
then
   source /usr/local/abin/.afni/help/all_progs.COMP.bash
fi"

afni_system_check.py -check_all

## ICA FIX
wget http://www.fmrib.ox.ac.uk/~steve/ftp/fix.tar.gz
sudo tar -C /usr/local -zxvf fix.tar.gz
#add to .bashrc:
"export PATH=$PATH:/usr/local/fix"

##dcm2
pip install dcm2bids
pip install --upgrade dcm2bids
sudo aptitude install dcm2niix
sudo aptitude install jo
sudo apt-get install nodejs
sudo apt-get install npm
sudo npm install -g bids-validator

##dHCP Anat Pipeline
docker pull biomedia/dhcp-structural-pipeline:latest

#Download itksnap: http://www.itksnap.org/pmwiki/pmwiki.php?n=Downloads.SNAP3
sudo tar -C /usr/local -zxvf itksnap-3.8.0-20190612-Linux-x86_64.tar.gz
#add path to .bashrc

